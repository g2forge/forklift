#!/bin/bash
set -eu -o pipefail

function help () {
	echo "$(basename ${0}): Install forklift pallet manager, or a pallet"
	echo
	echo "Usage: $(basename ${0})"
	echo -e "\tcommands:"
	echo -e "\t\t--help: Display this command line help"
	echo -e "\t\t--dev: Install forklift from this directory for testing forklift"
	echo -e "\t\tfor any other set of arguments this script will install forklift and then run it with the specified command line arguments"
	echo
}

SELF_DIR=$(cd $(dirname ${0}) && pwd -P)
SELF=${SELF_DIR}/$(basename ${0})

DEVINSTALL=0
if [[ $# -ge 1 ]]; then
	COMMAND="${1}"
	case ${COMMAND} in
		-h|--help|help)
		help
		exit 0
		;;
		-d|--dev|dev|--development|development)
		if [ -x ${SELF_DIR}/forklift ]; then
			DEVINSTALL=1
			shift
		else
			echo "Cannot do a development install without a development copy of forklift!"
			exit 1
		fi
		;;
	esac
fi

if [ ${DEVINSTALL} -ne 0 ]; then
	echo "Performing a development install of forklift from current directory"
	FORKLIFT=${SELF_DIR}/forklift
	${FORKLIFT} run builtin ../ current .forklift/post-import
else
	TEMPDIR=$(mktemp -d)
	pushd ${TEMPDIR} 2>&1 >/dev/null
		set +u
		if [ -z "${RELEASE_URL}" ]; then
			set -u
			
			# Get release information from github using github API
			echo "Getting information about latest release"
			
			RELEASE_ORG="g2forge"
			RELEASE_REPO="forklift"
			
			RELEASE_JSON="release.json"
			curl https://api.github.com/repos/${RELEASE_ORG}/${RELEASE_REPO}/releases/latest 2> /dev/null > ${RELEASE_JSON}
			RELEASE_TAG_NAME=$(grep -F "tag_name" ${RELEASE_JSON} | sed -e 's/[^"]*"tag_name":[^"]*"\([^"]*\)",/\1/')
			RELEASE_TARBALL_URL=$(grep -F "tarball_url" ${RELEASE_JSON} | sed -e 's/[^"]*"tarball_url":[^"]*"\([^"]*\)",/\1/')
		else
			set -u
			
			# Install a specific version
			echo "Installing the version from ${RELEASE_URL}"
			# RELEASE_URL: The zip or tarball download URL for a specific branch
			if [ ${RELEASE_URL: -4} == ".zip" ]; then
				RELEASE_URL="$(dirname ${RELEASE_URL})/$(basename ${RELEASE_URL} .zip).tar.gz"
			fi
			
			RELEASE_TAG_NAME=$(basename ${RELEASE_URL} .tar.gz)
			RELEASE_TARBALL_URL="${RELEASE_URL}"
			
			STRIPPED=$(dirname $(dirname ${RELEASE_URL}))
			RELEASE_ORG=$(basename $(dirname ${STRIPPED}))
			RELEASE_REPO=$(basename ${STRIPPED})
		fi
		
		
		
		if which forklift > /dev/null 2>&1; then
			# Forklift is already installed, so we can use that
			FORKLIFT=forklift
			INSTALLED_VERSION=$(${FORKLIFT} version)
			echo "Found previous install of ${INSTALLED_VERSION}"
			if [ "${INSTALLED_VERSION}" == "${RELEASE_TAG_NAME}" ]; then
				echo "Already up to date, skipping download and install"
			else
				echo "Installing forklift ${RELEASE_TAG_NAME}"
				${FORKLIFT} import com.github ${RELEASE_ORG}/${RELEASE_REPO} ${RELEASE_TAG_NAME}
				
				echo "Removing forklift ${INSTALLED_VERSION}"
				${FORKLIFT} delete com.github ${RELEASE_ORG}/${RELEASE_REPO} ${INSTALLED_VERSION}
			fi
		else
			# Forklift wasn't already installed, so use curl to download a release from github for temporary usage
			echo "Downloading forklift ${RELEASE_TAG_NAME}"
			RELEASE_TGZ="release.tar.gz"
			curl -L ${RELEASE_TARBALL_URL} > ${RELEASE_TGZ}
			tar -xf ${RELEASE_TGZ}
			RELEASE_DIR=$(find ./ -maxdepth 1 -mindepth 1 -type d | grep -F "${RELEASE_ORG}-${RELEASE_REPO}-" | head -n 1)
			
			echo "Running install for ${RELEASE_TAG_NAME}"
			# Note that this will download, import and then run the setup script
			${RELEASE_DIR}/forklift import com.github ${RELEASE_ORG}/${RELEASE_REPO} ${RELEASE_TAG_NAME}
			FORKLIFT="$(${RELEASE_DIR}/forklift path com.github ${RELEASE_ORG}/${RELEASE_REPO} ${RELEASE_TAG_NAME})/forklift"
		fi
	popd 2>&1 >/dev/null
	rm -rf ${TEMPDIR}
fi

if [[ $# -gt 0 ]]; then
	echo "Running forklift $@"
	${FORKLIFT} $@
fi
