#!/bin/bash
set -eu -o pipefail

function help () {
	echo "$(basename ${0}): Install forklift pallet manager"
	echo
	echo "Usage: $(basename ${0})"
	echo -e "\tcommands:"
	echo -e "\t\t--dev: Install forklift from this directory for testing forklift"
	echo
}

SELF_DIR=$(cd $(dirname ${0}) && pwd -P)
SELF=${SELF_DIR}/$(basename ${0})

DEVINSTALL=0
if [[ $# -eq 1 ]]; then
	COMMAND="${1}"
	case ${COMMAND} in
		-h|--help|help)
		help
		exit 0
		;;
		--dev|dev|--development|development)
		if [ -f ${SELF_DIR}/forklift ]; then
			DEVINSTALL=1
		else
			fail "Cannot do a development install without a development copy of forklift!"
		fi
		;;
		*)
		echo "Unrecognized command ${COMMAND}"
		exit 1
		;;
	esac
elif [[ $# -gt 0 ]]; then
	echo "No arguments allowed"
	exit 1
fi

if [ ${DEVINSTALL} -ne 0 ]; then
	echo "Performing a development install of forklift from current directory"
	${SELF_DIR}/forklift run builtin ../ current .forklift/post-import
else
	TEMPDIR=$(mktemp -d)
	pushd ${TEMPDIR} 2>&1 >/dev/null
		RELEASE_ORG="g2forge"
		RELEASE_REPO="forklift"
		RELEASE_JSON="release.json"
		RELEASE_TARGZ="release.tar.gz"
		
		# Get release information from github using github API
		echo "Getting information about latest release"
		curl https://api.github.com/repos/${RELEASE_ORG}/${RELEASE_REPO}/releases/latest 2> /dev/null > ${RELEASE_JSON}
		RELEASE_TARBALL_URL=$(grep -F "tarball_url" ${RELEASE_JSON} | sed -e 's/[^"]*"tarball_url":[^"]*"\([^"]*\)",/\1/')
		RELEASE_TAG_NAME=$(grep -F "tag_name" ${RELEASE_JSON} | sed -e 's/[^"]*"tag_name":[^"]*"\([^"]*\)",/\1/')
		
		if which forklift > /dev/null 2>&1; then
			# Forklift is already installed, so we can use that
			INSTALLED_VERSION=$(forklift version)
			echo "Found previous install of ${INSTALLED_VERSION}"
			if [ "${INSTALLED_VERSION}" == "${RELEASE_TAG_NAME}" ]; then
				echo "Already up to date, skipping download and install"
			else
				echo "Installing forklift ${RELEASE_TAG_NAME}"
				forklift import com.github ${RELEASE_ORG}/${RELEASE_REPO} ${RELEASE_TAG_NAME}
				
				echo "Removing forklift ${INSTALLED_VERSION}"
				forklift delete com.github ${RELEASE_ORG}/${RELEASE_REPO} ${INSTALLED_VERSION}
			fi
		else
			# Forklift wasn't already installed, so use curl to download a release from github for temporary usage
			echo "Downloading forklift ${RELEASE_TAG_NAME}"
			curl -L ${RELEASE_TARBALL_URL} > ${RELEASE_TARGZ}
			tar -xf ${RELEASE_TARGZ}
			RELEASE_DIR=$(find ./ -maxdepth 1 -mindepth 1 -type d | grep -F "${RELEASE_ORG}-${RELEASE_REPO}-" | head -n 1)
			
			echo "Running install for ${RELEASE_TAG_NAME}"
			# Note that this will download, import and then run the setup script
			${RELEASE_DIR}/forklift import com.github ${RELEASE_ORG}/${RELEASE_REPO} ${RELEASE_TAG_NAME}
		fi
	popd 2>&1 >/dev/null
	rm -rf ${TEMPDIR}
fi
