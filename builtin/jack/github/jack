#!/bin/bash
set -eu -o pipefail

function help () {
	echo "$(basename ${0}): Jack for pallets from github"
	echo
	echo "Usage: $(basename ${0}) test|import|path|run com.github <org/repo> <refspec>"
	echo -e "\tcommands:"
	echo -e "\t\ttest:              Test whether this jack can move the specified pallet"
	echo -e "\t\timport:            Import the pallet"
	echo -e "\t\tpath:              Get the path of the specified pallet on the local machine"
	echo -e "\t\trun <...> command: Run the specified command in the pallet"
	echo -e "\t\tupdate:            Check for and install updates to the specified pallet (for example if the version is a branch)"
	echo -e "\t\tdelete:            Delete the specified pallet"
	echo
}

SELF_DIR=$(cd $(dirname ${0}) && pwd -P)
SELF=${SELF_DIR}/$(basename ${0})

. ${SELF_DIR}/../../common/source.bash

FLGHJACK_SCRIPT=.forklift
FLGHJACK_POSTIMPORT=${FLGHJACK_SCRIPT}/post-import
FLGHJACK_PREUPDATE=${FLGHJACK_SCRIPT}/pre-update
FLGHJACK_POSTUPDATE=${FLGHJACK_SCRIPT}/post-update
FLGHJACK_PREDELETE=${FLGHJACK_SCRIPT}/pre-delete
FLGHJACK_POSTDELETE=${FLGHJACK_SCRIPT}/post-delete
function flscript () {
	SCRIPT="${1}"
	# Figure out whether we need to change directories first
	CHDIR=$([[ "$(dirname ${SCRIPT})" == "${FLGHJACK_SCRIPT}" ]] && echo 0 || echo 1)
	[[ ${CHDIR} -eq 0 ]] || pushd ${CACHE_DIR} > /dev/null 2>&1
	create_flbin_dir
	[[ ! -x ${SCRIPT} ]] || FORKLIFT=${SELF_DIR}/../../../forklift WAREHOUSE="${WAREHOUSE}" PALLET="${PALLET}" VERSION="${VERSION}" FLBIN_DIR=${FLBIN_DIR} ${SCRIPT}
	[[ ${CHDIR} -eq 0 ]] || popd > /dev/null 2>&1
}

function install () {
	COMMAND=${1}
	PACKAGE=${2}
	if ! which ${COMMAND} > /dev/null 2>&1; then
		${SELF_DIR}/../../common/install ${PACKAGE}
	elif [[ $(which ${COMMAND}) = *"/cygdrive/"* ]]; then
		${SELF_DIR}/../../common/install ${PACKAGE}
	fi
}

args_min 1
COMMAND="${1}"

case ${COMMAND} in
	-h|--help|help)
	help
	exit 0
esac

args_min 4
WAREHOUSE="${2}"
PALLET="${3}"
VERSION="${4}"
shift 4

JACKCACHE_ROOT=${FLCACHE_ROOT}/$(basename ${SELF_DIR})
CACHE_DIR=${JACKCACHE_ROOT}/${WAREHOUSE}/${PALLET}/${VERSION}

if [ ! -d ${JACKCACHE_ROOT} ]; then
	mkdir -p ${JACKCACHE_ROOT}
	cat >${JACKCACHE_ROOT}/README.md << EOF
# $(basename ${SELF_DIR}) Cache

This directory contains the pallets which have been installed by the [$(basename ${SELF_DIR}) jack](${SELF}).
Within this directory, each installed pallet can be found at \`WAREHOUSE/PALLET/VERSION\`.
Installed pallets local git repositories cloned from the warehouse which the current branch set to the \`VERSION\`.
If the version is a branch (rather than a tag) then it will be set to track the correct upstream branch to allow updates.
EOF
fi

function warehouse2host () {
	echo "${WAREHOUSE}" | sed -e 's/\./\n/g' | tac | tr -s '\n' '.' | sed -e 's/.$/\n/'
}
function verify () {
	if [ "${WAREHOUSE}" != "com.github" ]; then
		GHHOST=$(warehouse2host)
		echo -e "${CFMT_INFO}Checking if ${GHHOST} is a GitHub Enterprise server${CFMT_NORMAL}" >&2
		if ! (curl --connect-timeout 1 -is "https://${GHHOST}/api/v3" 2> /dev/null | grep -qe '^X-GitHub-'); then
			if ! (curl --connect-timeout 1 -is "http://${GHHOST}/api/v3" 2> /dev/null | grep -qe '^X-GitHub-'); then
				fail "Unknown warehouse: ${WAREHOUSE}"
			fi
		fi
	fi
}
function import () {
	if [ ! -d ${CACHE_DIR} ]; then
		verify
		install git git
		
		echo -e "${CFMT_INFO}Importing ${WAREHOUSE} ${PALLET} ${VERSION}${CFMT_NORMAL}" >&2
		PARENT_DIR=$(dirname ${CACHE_DIR})
		mkdir -p ${PARENT_DIR}
		pushd ${PARENT_DIR} > /dev/null 2>&1
		git clone -- git@$(warehouse2host):${PALLET}.git $(basename ${CACHE_DIR}) >&2
		cd ${CACHE_DIR}
		BRANCH=$(git rev-parse --abbrev-ref HEAD)
		if [ "${BRANCH}" != "${VERSION}" ]; then
			echo -e "${CFMT_INFO}Switching to version ${VERSION}${CFMT_NORMAL}" >&2
			REFSPEC=$(git show-ref | grep "/${VERSION}\$" | cut -f 2 -d ' ')
			git checkout -b ${VERSION} ${REFSPEC} >&2
		fi
		if [ "Cygwin" == $(${SELF_DIR}/../../common/osinfo -d) ]; then
			echo -e "${CFMT_INFO}Fixing cygwin symlinks${CFMT_NORMAL}" >&2
			git config core.symlinks true
			git checkout -f
		fi
		flscript ${FLGHJACK_POSTIMPORT}
		popd > /dev/null 2>&1
		echo -e "${CFMT_SUCCESS}Import successful${CFMT_NORMAL}!" >&2
	fi
}
function update () {
	pushd ${CACHE_DIR} > /dev/null 2>&1
	TRACKING=$(git branch -lvv | grep -F "* ${VERSION}" | sed -e "s/* ${VERSION} [0-9a-f]* \\(\\[\\([^]]*\\)\\]\\)*.*/\2/")
	if [[ "${TRACKING}" != "" ]]; then
		echo -e "${CFMT_INFO}Updating ${WAREHOUSE} ${PALLET} ${VERSION}${CFMT_NORMAL}" >&2
		
		flscript ${FLGHJACK_PREUPDATE}
		git pull >&2
		flscript ${FLGHJACK_POSTUPDATE}
	else
		echo -e "${CFMT_INFO}Skipping update of ${WAREHOUSE} ${PALLET} ${VERSION}, not tracking a branch${CFMT_NORMAL}" >&2
	fi
	echo -e "${CFMT_SUCCESS}Update successful${CFMT_NORMAL}!" >&2
	popd > /dev/null 2>&1
}

case ${COMMAND} in
	test)
	args_max 4
	verify
	;;
	import)
	args_max 4
	import
	;;
	path)
	args_max 4
	import
	echo $(cd ${CACHE_DIR} && pwd -P)
	;;
	run)
	import
	COMMAND=$(cd ${CACHE_DIR} && pwd -P)/${1}
	shift
	${COMMAND} $@
	;;
	update)
	args_max 4
	verify
	update
	;;
	delete)
	args_max 4
	verify
	echo -e "${CFMT_INFO}Deleting ${WAREHOUSE} ${PALLET} ${VERSION}${CFMT_NORMAL}" >&2
	flscript ${CACHE_DIR}/${FLGHJACK_PREDELETE}
	if [[ -x "${CACHE_DIR}/${FLGHJACK_POSTDELETE}" ]]; then
		TEMPSCRIPT=$(mktemp)
		chmod +x ${TEMPSCRIPT}
		cat "${CACHE_DIR}/${FLGHJACK_POSTDELETE}" > ${TEMPSCRIPT}
		
		rm -rf ${CACHE_DIR}
		
		FORKLIFT=${SELF_DIR}/../../../forklift WAREHOUSE="${WAREHOUSE}" PALLET="${PALLET}" VERSION="${VERSION}" FLBIN_DIR=${FLBIN_DIR} ${TEMPSCRIPT}
		rm -rf ${TEMPSCRIPT}
	else
		rm -rf ${CACHE_DIR}
	fi
	echo -e "${CFMT_SUCCESS}Delete successful${CFMT_NORMAL}!" >&2
	
	# Clean up empty parent directories
	CHECKDIR=$(dirname ${CACHE_DIR})
	while [[ "${CHECKDIR}" != "${JACKCACHE_ROOT}" ]]; do
		set +e
		rmdir ${CHECKDIR} >/dev/null 2>&1 || break
		set -e
		CHECKDIR=$(dirname ${CHECKDIR})
	done
	;;
	*)
	fail "Unknown command: ${COMMAND}"
	;;
esac

