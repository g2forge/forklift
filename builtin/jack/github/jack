#!/bin/bash
set -eu -o pipefail

function help () {
	echo "$(basename ${0}): Jack for pallets from github"
	echo
	echo "Usage: $(basename ${0}) test|import|path|run com.github <org/repo> <refspec>"
	echo -e "\tcommands:"
	echo -e "\t\ttest:              Test whether this jack can move the specified pallet"
	echo -e "\t\timport:            Import the pallet"
	echo -e "\t\tpath:              Get the path of the specified pallet on the local machine"
	echo -e "\t\trun <...> command: Run the specified command in the pallet"
	echo
}

SELF_DIR=$(cd $(dirname ${0}) && pwd -P)
SELF=${SELF_DIR}/$(basename ${0})

. ${SELF_DIR}/../../common/source

function install () {
	COMMAND=${1}
	PACKAGE=${2}
	if ! which ${COMMAND} > /dev/null 2>&1; then
		${SELF_DIR}/../../common/install ${PACKAGE}
	elif [[ $(which ${COMMAND}) = *"/cygdrive/"* ]]; then
		${SELF_DIR}/../../common/install ${PACKAGE}
	fi
}

function args_min () {
	if [[ ${#BASH_ARGV[@]} -lt ${1} ]]; then
		fail "Too few arguments, ${1} (at least) required!"
	fi
}
function args_max () {
	if [[ ${#BASH_ARGV[@]} -gt ${1} ]]; then
		fail "Too many arguments, ${1} (at most) allowed!"
	fi
}

args_min 1
COMMAND="${1}"

case ${COMMAND} in
	-h|--help|help)
	help
	exit 0
esac

args_min 4
WAREHOUSE="${2}"
PALLET="${3}"
VERSION="${4}"
shift 4

CACHE_DIR=${FLCACHE_ROOT}/$(basename ${SELF_DIR})/${WAREHOUSE}/${PALLET}/${VERSION}

function warehouse2host () {
	echo "${WAREHOUSE}" | sed -e 's/\./\n/g' | tac | tr -s '\n' '.' | sed -e 's/.$/\n/'
}
function verify () {
	if [ "${WAREHOUSE}" != "com.github" ]; then
		GHHOST=$(warehouse2host)
		echo $GHHOST
		if ! (curl -is "https://${GHHOST}/api/v3" 2> /dev/null | grep -qe '^X-GitHub-'); then
			fail "Unknown warehouse: ${WAREHOUSE}"
		fi
	fi
}
function import () {
	if [ ! -d ${CACHE_DIR} ]; then
		verify
		install git git
		
		echo -e "${CFMT_INFO}Importing ${WAREHOUSE} ${PALLET} ${VERSION}${CFMT_NORMAL}"
		PARENT_DIR=$(dirname ${CACHE_DIR})
		mkdir -p ${PARENT_DIR}
		pushd ${PARENT_DIR} > /dev/null 2>&1
		git clone -- git@$(warehouse2host):${PALLET}.git $(basename ${CACHE_DIR})
		cd ${CACHE_DIR}
		git checkout -b ${VERSION} ${VERSION}
		if [ "Cygwin" == $(${SELF_DIR}/../../common/osinfo -d) ]; then
			git config core.symlinks true
			git checkout -f
		fi
		popd > /dev/null 2>&1
	fi
}

case ${COMMAND} in
	test)
	args_max 4
	verify
	;;
	import)
	args_max 4
	import
	;;
	path)
	args_max 4
	import
	echo $(cd ${CACHE_DIR} && pwd -P)
	;;
	run)
	import
	COMMAND=$(cd ${CACHE_DIR} && pwd -P)/${1}
	shift
	${COMMAND} $@
	;;
	delete)
	args_max 4
	verify
	rm -rf ${CACHE_DIR}
	;;
	*)
	fail "Unknown command: ${COMMAND}"
	;;
esac

